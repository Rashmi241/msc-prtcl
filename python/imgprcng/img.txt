1 program 
####
from PIL import Image
path='/home/user/rashmi/images/sun.jpeg'
image=Image.open(path)
width=image.width
height=image.height
print('image width',width)
print('image height',height)

import cv2
import numpy
img = cv2.imread("/home/user/rashmi/images/sun.jpeg")
print('No of Channel is: ' + str(img.ndim))
cv2.imshow("Channel", img)
cv2.waitKey()
cv2.destroyAllWindows()

import cv2
img=cv2.imread('/home/user/rashmi/images/cat.jpeg')
B,G,R=cv2.split(img)
print(B)
print(G)
print(R)

import cv2
img=cv2.imread('/home/user/rashmi/images/sun.jpeg')
B,G,R=cv2.split(img)
#print(B)
#print(G)
#print(R)

cv2.imshow("green",G)
cv2.waitKey(0)
cv2.destroyAllWindows()

import cv2
img=cv2.imread('/home/user/rashmi/images/sun.jpeg')
B,G,R=cv2.split(img)
#print(B)
#print(G)
#print(R)
cv2.imshow("Blue",B)
cv2.waitKey(0)
cv2.destroyAllWindows()

import cv2
img=cv2.imread('/home/user/rashmi/images/sun.jpeg')
B,G,R=cv2.split(img)
#print(B)
#print(G)
#print(R)
cv2.imshow("Red",R)
cv2.waitKey(0)
cv2.destroyAllWindows()
#########
PROGRAM 2
#########
import cv2
img=cv2.imread("/home/user/rashmi/images/cat.jpg",0)
ret,bw_img=cv2.threshold(img,127,255,cv2.THRESH_BINARY)
cv2.imshow("Binary", bw_img)
cv2.imshow("binary",bw_img)
cv2.waitKey(0)
cv2.destroyAllWindow()
#########
PROHRAM 3
#########
from PIL import Image
image=Image.open('/home/user/rashmi/images/cat.jpeg')
print('filename =',image.filename)
print('fileformat =',image.format)
print('mode =',image.mode)
print('size =',image.size)
print('width =',image.width)
print('Height =',image.height)
print("Is Animated: ", (getattr(image, "is_animated", False)))
image.close() 
#########
PROGRAM 4
#########
#arithmatic operation on image
import cv2
import matplotlib.pyplot as plt
img1=cv2.imread("a1.jpeg")
img2=cv2.imread("a2.jpeg")
#a=plt.resize(img1,(300,300))
#b=plt.resize(img2,(300,300))
add=cv2.add(img1,img2)
sub=cv2.subtract(img1,img2)
mul=cv2.multiply(img1,img2)
div=cv2.divide(img1,img2)
plt.subplot(221),plt.imshow(add,cmap='gray'),plt.title("addition"),plt.axis("off")
plt.subplot(222),plt.imshow(sub,cmap='gray'),plt.title("subtraction"),plt.axis("off")
plt.subplot(223),plt.imshow(mul,cmap='gray'),plt.title("multiplication"),plt.axis("off")
plt.subplot(224),plt.imshow(div,cmap='gray'),plt.title("division"),plt.axis("off")
plt.show()


#logic operation on images

import cv2
import matplotlib.pyplot as plt
img1=cv2.imread("a1.jpeg")
img2=cv2.imread("a2.jpeg")
bitwise_AND = cv2.bitwise_and(img1, img2)
bitwise_OR = cv2.bitwise_or(img1, img2)
bitwise_NOT = cv2.bitwise_not(img1)
plt.subplot(221),plt.imshow(bitwise_AND,cmap='gray'),plt.title('AND'),plt.axis('off')
plt.subplot(222),plt.imshow(bitwise_OR,cmap='gray'),plt.title('OR'),plt.axis('off')
plt.subplot(223),plt.imshow(bitwise_NOT,cmap='gray'),plt.title('NOT'),plt.axis('off')
plt.show()

##########
PROGRAM 5
##########
from PIL import Image
import matplotlib.pyplot as plt
im = Image.open("/home/user/rashmi/images/cat.jpg")
pl = im.histogram()
plt.bar(range(256), pl[:256], color='r', alpha=0.5)
plt.bar(range(256), pl[256:2*256], color='g', alpha=0.4)
plt.bar(range(256), pl[2*256:], color='b', alpha=0.3)
plt.show()


###########
PROGRAM 6
intensity tranformation
##########
#GAMMA
import imageio
import matplotlib.pyplot as plt
pic=imageio.imread('tree.jpeg')
gamma=2.2
gamma_correction=((pic/255)**(1/gamma))
plt.figure(figsize=(5,5))
plt.imshow(gamma_correction)
plt.axis('off')
plt.show()
#LOG
import imageio
import numpy as np
import matplotlib.pyplot as plt
pic=imageio.imread('dog.jpeg')
gray=lambda rgb:np.dot(rgb[...,:3],[0.399,0.987,0.214])
gray=gray(pic)
max_=np.max(gray)
def log_transform():
 return(255/np.log(1+max_))*np.log(1+gray)
plt.figure(figsize=(5,5))
plt.imshow(log_transform(),cmap=plt.get_cmap(name='gray'))
plt.axis('off')
plt.show()
# -VE
import imageio
import matplotlib.pyplot as plt
import warnings
import matplotlib.cbook
#warnings.filterwarnings("ignore",category=matplotlib.cbook.mplDeprecation)
pic=imageio.imread('dog.jpeg')
plt.figure(figsize=(4,6))
negative=256-pic
plt.figure(figsize=(4,6))
plt.imshow(negative)
plt.axis('off')
plt.show()
########
HISTOGRAM EQVI
########
import cv2
import numpy as np
from matplotlib import pyplot as plt
img=cv2.imread('cat1.jpeg',0)
plt.hist(img.ravel(),256,[0,256])
plt.show()
plt.savefig('hist.png')
equ=cv2.equalizeHist(img)
res=np.hstack((img,equ))
#plt.imshow(res)
cv2.imwrite('Equalized Image.png',res)
plt.hist(res.ravel(),256,[0,256])
plt.show()
plt.savefig('equal-hist.png')
############
GEOMETRIC
########## ##





